<project default="deb">
<!--
*****************************************************************

See doc/INSTALL for instructions how to build WollMux.

Targets:

clean: Remove all generated files except for version information (which is only
       regenerated when building from a git working copy.

deb: Create the Debian package in the dist/ directory. 
     ATTENTION! If you build from vanilla sources, this Debian package will NOT work
     on a standard Debian or Ubuntu system. If you want a Debian package that works
     on these systems, you will have to add a debian/ directory. If this is present,
     it will be used. Otherwise the lhmdeb directory is used, which only works for
     the Landeshauptstadt München's Basisclient.

install: Install the WollMux OOo component in the user area for the user running ant.
         DO NOT USE THIS AS ROOT. IT DOESN'T DO SYSTEM-WIDE INSTALLATION.

updateLocalizationConf: Collects new strings from the WollMux sources and adds them
                        to src/data/localization.conf

documentation: Download WollMux documentation from WollMux Wiki and prepare it for 
               offline usage.

makechangelog: Attempt to create ChangeLog file from LiMux Wiki. Only works inside
             the LHM's network.

bumpversion: Auto-generates lhmdeb/changelog with the correct version.
             Only executed if no debian/rules file present, i.e. this target is not
             executed for a true Debian build.


*****************************************************************-->

<!-- If you follow the INSTALL instructions exactly, you won't have to change this path --> 	
	<property name="UNOHELPER_DIR" value="../UNOHelper" />

<!-- Don't change anything below this line. -->
	<property name="COMPONENT" value="WollMux" />
	<property name="RDB_DIR" value="oxt" />
	<property name="PACKAGE_DIR" value="dist" />
	<property name="DOC_DIR" value="${PACKAGE_DIR}/doc"/>
	<property name="PKG_NAME" value="${COMPONENT}.oxt" />
	<property name="PKG_FILE" value="${PACKAGE_DIR}/${PKG_NAME}" />
	<property name="MISC" value="misc" />
	<property name="DESCRIPTION_XML" value="${RDB_DIR}/description.xml" />
	<property name="UPDATE_XML" value="${PACKAGE_DIR}/${COMPONENT}.update.xml" />
	<property name="VERSION_FILE" value="${MISC}/version"/>
	<property name="CHANGELOG_FILE" value="doc/ChangeLog"/>
	<property name="WOLLMUX_WIKI_URL" value="http://www.wollmux.net/wiki" />

	<property name="MY_CLASSES" value="bin" />

	
	<property name="BIN" value="bin" />
	<property name="SRC" value="src" />
	<property name="THIRDPARTY" value="thirdparty"/>
	
	<property name="WOLLMUXBAR_NAME" value="WollMuxBar" />
	<property name="WOLLMUXBAR_JAR_NAME" value="${WOLLMUXBAR_NAME}.jar" />
	<property name="WOLLMUXBAR_JAR" value="${PACKAGE_DIR}/${WOLLMUXBAR_JAR_NAME}" />
	<property name="WOLLMUXBAR_EXE_NAME" value="wollmuxbar.exe" />
	<property name="WOLLMUXBAR_EXE" value="${PACKAGE_DIR}/${WOLLMUXBAR_EXE_NAME}" />
	
    <!-- The directory that contains the subdirectories com/ and win/ of the SDK -->
	<!-- First check if we got our own copy of classes/ on the same level as WollMux and UNOHelper -->
	<available type="dir" file="../classes/bin" property="TOOLING" value="../classes/bin"/>
	<!-- When building the Debian package, we're a little deeper in the directory tree.
	     The use of filepath rather than putting the dots in the file attribute
	     is necessary, because ant aborts with an error if file contains a path that
	     goes up beyond the filesystem root, which is possible if building e.g. in /tmp -->
	<available type="dir" filepath="../../../../" file="classes/bin" property="TOOLING" value="../../../../classes/bin"/>
	<!-- Last resort: Use classes/ subdirectory from OOO_SDK -->
	<property name="TOOLING" value="${OOO_SDK}/classes" />
	<echo message="===== Using bootstrap files from ${TOOLING} =====" />

	
	<available file="debian/rules" property="debian.native" />
	
	<target name="bumpversion" unless="debian.native">
		<exec executable="bash" failifexecutionfails="false">
		  <arg line="misc/bumpversion ${VERSION_FILE} lhmdeb/changelog"/>
		</exec>		
	</target>
	
	<target name="makechangelog">
		<exec executable="perl" failifexecutionfails="false" output="${CHANGELOG_FILE}">
		  <arg line="-l misc/makechangelog "/>
		</exec>		
	</target>

	<target name="documentation">
		<!-- Download all pages belonging to the WollMux manual category --> 
		<get dest="${DOC_DIR}">
			<resourcelist>
				<url url="${WOLLMUX_WIKI_URL}/index.php?title=Spezial:Exportieren&amp;action=submit&amp;catname=Handbuch_des_WollMux&amp;addcat=Hinzuf%C3%BCgen&amp;wpDownload=1" />
				<filterchain>
					<replaceregex pattern='.*&lt;.*textarea name="pages"[^>]*>\n([^&lt;]*).*' replace="\1" flags="gis" byline="false" />
					<tokenfilter>
						<linetokenizer />
						<replaceregex pattern='^' replace='${WOLLMUX_WIKI_URL}/' />
					</tokenfilter>
				</filterchain>
			</resourcelist>
		</get>

		<!-- Modify downloaded files for offline usage -->
		<!-- Change links to reference local files -->
		<replaceregexp match='"/wiki/(Datei:)?' replace='"' flags="g">
			<fileset dir="${DOC_DIR}" />
		</replaceregexp>
		<!-- Remove navigation bar -->
		<replaceregexp match='\s*&lt;!-- jumpto -->.*&lt;!-- /jumpto -->' replace="" flags="gis">
			<fileset dir="${DOC_DIR}" />
		</replaceregexp>
		<!-- Remove footer (except for license information) -->
		<replaceregexp match='\s*&lt;!-- catlinks -->.*(&lt;li id="footer-info-copyright">.*?&lt;/li).*&lt;!-- /footer -->' replace='\1&lt;/div>' flags="gis">
			<fileset dir="${DOC_DIR}" />
		</replaceregexp>
		<!-- Remove magnifying links -->
		<replaceregexp match='&lt;div class="magnify">.*?&lt;/div>' replace='' flags="g">
			<fileset dir="${DOC_DIR}" />
		</replaceregexp>
		<!-- Direct references to original images -->
		<replaceregexp match='&lt;a[^>]*class="image"[^>]*>\s*&lt;img [^>]*src="(images/(thumb/)?([^/]+/[^/]+/[^/"]+)[^>]*)[^>]*"[^>]*>&lt;/a>' replace='&lt;img src="images/\3" />' flags="g">
			<fileset dir="${DOC_DIR}" />
		</replaceregexp>

		<!-- Download images -->
		<get dest="${DOC_DIR}">
			<resourcelist>
				<fileset dir="${DOC_DIR}" />
				<filterchain>
					<tokenfilter>
						<linetokenizer />
						<containsstring contains="&lt;img" />
						<replaceregex pattern='.*&lt;img [^>]*src="([^"]*)".*' replace="${WOLLMUX_WIKI_URL}/\1" />
					</tokenfilter>
				</filterchain>
			</resourcelist>
		</get>
		<!-- Use local directory for images -->
		<replaceregexp match='&lt;img src="[^"]*/([^"]*)"' replace='&lt;img src="\1"' flags="g">
			<fileset dir="${DOC_DIR}" />
		</replaceregexp>

		<!-- Restore umlauts in filenames -->
		<move todir="${DOC_DIR}">
			<fileset dir="${DOC_DIR}" />
			<mapper>
				<filtermapper>
					<replacestring from="%C3%BC" to="ü" />
					<replacestring from="%C3%A4" to="ä" />
				</filtermapper>
			</mapper>
		</move>
	</target>

	<target name="WollMux.oxt-ButtonsOnly">
		<delete file="${PKG_FILE}" />
		<zip destfile="${PKG_FILE}">
			<fileset dir="${RDB_DIR}">
				<include name="Addons.xcu" />
				<include name="Sidebar.xcu" />
				<include name="WriterWindowState.xcu" />
			</fileset>
			<zipfileset dir="${RDB_DIR}" prefix="icons">
				<include name="tools-large.png" />
			</zipfileset>
			<fileset dir="${RDB_DIR}/BUTTONS_ONLY" includes="META-INF/manifest.xml" />
			<fileset dir="misc" includes="buildinfo" />
		</zip>
		
		<echo level="info">unopkg remove ${PKG_NAME}:</echo>
		<exec executable="unopkg" failifexecutionfails="false">
			<arg line="remove ${PKG_NAME}" />
		</exec>
		<echo level="info">unopkg add ${PKG_NAME}:</echo>
		<exec executable="unopkg" failifexecutionfails="false">
			<arg line="add ${PKG_FILE}" />
		</exec>
		
		<tstamp><format property="mytime" pattern="HH:mm:ss"/></tstamp>
		<echo level="info" message="Install finished at ">${mytime}</echo>
	</target>
	
	<!-- Das Target install installiert/reinstalliert das erzeugte uno-package -->
	<target name="install">
		<echo level="info">unopkg remove ${PKG_NAME}:</echo>
		<exec executable="unopkg" failifexecutionfails="false">
			<arg line="remove ${PKG_NAME}" />
		</exec>
		<echo level="info">unopkg add ${PKG_NAME}:</echo>
		<exec executable="unopkg" failifexecutionfails="false">
			<arg line="add ${PKG_FILE}" />
		</exec>
		
		<tstamp><format property="mytime" pattern="HH:mm:ss"/></tstamp>
		<echo level="info" message="Install finished at ">${mytime}</echo>
	</target>

	<target name="clean" >
		<delete dir="${PACKAGE_DIR}/deb" />
	</target>

	<target name="deb">
		<property name="DEB_BUILD_DIR" value="${PACKAGE_DIR}/deb/wollmux-${VERSION}" />
		<condition property="DEBIAN_DIR" value="debian" else="lhmdeb">
			<available file="debian/rules" />
		</condition>
		<copy todir="${DEB_BUILD_DIR}" >
			<fileset dir="." includes="**/*" excludes="${DEB_BUILD_DIR} **/.git/** **/.git" /> 
			<fileset dir="." includes="**/.*" excludes="${DEB_BUILD_DIR} **/.git/** **/.git" />
		</copy>
		
		<exec dir="${DEB_BUILD_DIR}" executable="ant" failifexecutionfails="true" failonerror="true">
			<arg line="-f build.xml clean" />
		</exec>

		<copy todir="${DEB_BUILD_DIR}/debian" >
			<fileset dir="${DEBIAN_DIR}" includes="**/*"/> 
		</copy>
		<exec dir="${DEB_BUILD_DIR}/debian" executable="chmod" >
			<arg line="a+x rules" />
		</exec>
		
		<exec dir="${PACKAGE_DIR}/deb" executable="dpkg-source" failifexecutionfails="true" failonerror="true">
			<arg line="-b wollmux-${VERSION}" />
		</exec>
		
		<exec dir="${DEB_BUILD_DIR}" executable="dpkg-buildpackage" failifexecutionfails="true" failonerror="true">
			<arg line="-uc -us -sa -rfakeroot -I.hg -I.git -I.svn -I.gitignore -I.hgignore" />
		</exec> 
		<delete dir="${DEB_BUILD_DIR}" />
	</target>

	<!-- Das Target aktualisiert das LocalizationConf-File -->
	<target name="updateLocalizationConf">
		<java classname="de.muenchen.allg.itd51.wollmux.LocalizationUpdater" fork="true" classpath="${MY_CLASSES}" dir="${basedir}"/>
	</target>

</project>
